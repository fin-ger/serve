// Code generated by go-bindata.
// sources:
// static/list.html
// DO NOT EDIT!

package static

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticListHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x55\x51\x6b\xdb\x30\x10\x7e\xb6\x7f\xc5\x61\xe8\x5b\x6d\xa7\x94\xc1\xf0\x54\x43\x59\x19\xec\xa5\x0c\xb6\x3f\x70\x89\x2e\xb1\xa8\x2c\x19\x49\x5d\x9a\x18\xff\xf7\x21\xc9\x49\x9d\xd4\xcb\xb6\xee\x29\xc9\xe9\xbb\xfb\xbe\xef\x4e\xba\xb0\xc6\xb5\xb2\x4e\x53\xd6\x10\xf2\x3a\x4d\x98\x13\x4e\x52\xdd\xf7\x50\x7c\x43\xd7\xc0\x30\xb0\x32\x86\xd2\x84\x59\xb7\x0b\x5f\x12\x9f\x74\x9d\x26\xc9\x52\xf3\x1d\xf4\x69\x92\x24\x0d\x89\x4d\xe3\x2a\xb8\x59\x2c\xae\x3e\xf9\xc0\x56\x70\xd7\x4c\x7e\xaf\xb5\x72\xf9\x1a\x5b\x21\x77\x15\x7c\xd6\xcf\x46\x90\xb9\x86\x56\x2b\x6d\x3b\x5c\x91\xc7\x0c\x69\x9a\x24\x18\xeb\x39\x7a\x71\x39\xa7\x95\x36\xe8\x84\x56\x15\x28\xad\x5e\x41\x0e\x97\x92\x22\xb0\x45\xb3\x11\xaa\x82\x0f\x57\xc7\xd3\xa2\xf3\xca\xfb\x23\x6b\x90\x5d\xc1\xb3\xe2\x64\xa4\x98\x94\x29\x14\xb6\x34\xe1\x43\x29\x36\xaa\x02\xe3\xad\x04\xd1\x1d\x72\x2e\xd4\x26\x37\xd1\xdc\xed\xa2\x7b\x39\x4b\x1e\xe5\x6e\xb5\xe1\xf9\xd6\x60\x57\xc1\xd2\x10\x3e\xe5\x3e\x10\x4a\x70\x61\x3b\x89\xbb\x0a\x84\xf2\xdc\xf9\x52\xea\xd5\xd3\xb4\x43\xb7\x8b\x93\xaa\x56\xec\x67\x24\x49\x5a\xbb\x57\x0c\x9a\x55\x23\x7e\xd2\xd4\xa2\xd8\x53\x05\x8b\xe2\x23\xb5\x11\x96\xb0\x72\x9c\x16\x2b\xe3\x68\x53\xe6\xa7\x15\x46\xec\xbb\xe7\xc7\xc8\x9c\xf1\x1f\x09\x73\x0d\xac\x24\x5a\x7b\x97\x79\x53\x59\xfd\x88\x2d\xb1\xd2\x35\xe7\xa7\x9e\x26\xab\xbf\x8b\xfd\xf1\x94\x95\xb1\x06\x73\xe6\x00\x5a\x0b\x49\x20\x1c\xb5\xd9\x98\xce\x4f\x8b\xfb\x60\xc2\x10\x1a\x43\xeb\xbb\xac\x9c\x5c\xb5\xac\x2e\x58\x89\x31\xab\x74\xfc\x3c\x3d\xb2\xe7\x87\xa3\x03\x75\xdf\x8b\x35\x28\xf2\x55\x0c\x29\x07\x59\x36\x0c\xff\xa3\x28\x0a\x0a\xa5\x82\xa4\x7f\xd6\xd4\xf7\xa4\xf8\x30\x40\xdf\x1b\x54\x1b\x82\xe2\x8b\x90\x64\xdf\x25\x2a\x78\x2b\xee\x57\x2b\xb2\x56\x2c\x25\x85\x22\x6f\xb4\x86\xe6\x45\xe8\x57\xfb\x20\xcc\x30\x94\xa3\x86\x2c\xbc\x64\x3f\xce\xf0\x92\xb1\x86\xbe\x27\x69\x29\xa8\x3b\x1e\xc0\x88\xbe\x68\x12\x50\xba\x48\xe8\xe7\xef\xb3\x96\x3b\x47\xf6\x44\xe8\xc8\x9e\x47\x12\xf0\x73\xd1\xee\x54\x7f\x7e\x10\xd0\xf7\xe0\x74\xb8\xed\x87\x82\x33\x2a\xce\xfa\xe9\x39\x1e\x9f\xdb\xdf\xf6\xd3\x66\xf3\xf7\x79\x94\x38\xc9\x05\x0f\x3f\xde\x9c\x43\x1c\x6e\x86\xc1\x9e\xca\x98\x7f\x03\xaf\xcd\xf8\xa1\x1d\xca\xf9\x8e\x1c\xfd\x4d\x31\xd3\xb2\xf3\xee\x1e\x84\x79\xaf\xb9\x98\x0a\x5c\x98\xa9\x35\x1f\xbd\xe4\xac\xfe\x83\xa6\xfb\xb8\x6e\xce\x35\x8d\x5b\xe8\x92\x2a\xae\xb7\x4a\x6a\xe4\x80\x52\x02\xda\x59\xe2\xf9\x55\x50\xec\x45\x97\xd5\x7b\xd1\xf9\x4b\x7b\x7d\x01\xe7\xd0\x64\xb5\x43\xf3\x17\xb8\x62\xb3\x0f\xd0\x62\xb3\x9f\x3c\xe9\x37\xae\xfd\xee\x1c\x57\x24\x2b\xe3\xce\xf4\x4b\xd4\xff\x4f\xfe\x0a\x00\x00\xff\xff\xcf\xe4\x2d\xe8\x2e\x07\x00\x00")

func staticListHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticListHtml,
		"static/list.html",
	)
}

func staticListHtml() (*asset, error) {
	bytes, err := staticListHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/list.html", size: 1838, mode: os.FileMode(420), modTime: time.Unix(1524656120, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/list.html": staticListHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"list.html": &bintree{staticListHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

